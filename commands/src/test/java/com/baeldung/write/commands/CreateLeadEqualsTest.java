// ********RoostGPT********
/*
Test generated by RoostGPT for test claude-spring-event-sourcing using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_4026320306
ROOST_METHOD_SIG_HASH=equals_ed9bc63aed

Here are some JUnit test scenarios for the provided equals method:

Scenario 1: Testing equality with the same object

Details:
  TestName: equalsWithSameObject()
  Description: This test checks if the equals method returns true when comparing an object with itself.
Execution:
  Arrange: Create an instance of the CreateLead class.
  Act: Invoke the equals method, passing the same instance as the argument.
  Assert: Use assertEquals to verify that the method returns true.
Validation:
  The assertion verifies that the equals method correctly identifies an object as equal to itself.
  This test ensures the reflexive property of equality, which is a fundamental requirement for the equals method.

Scenario 2: Testing equality with a null object

Details:
  TestName: equalsWithNull()
  Description: This test checks if the equals method returns false when comparing an object with null.
Execution:
  Arrange: Create an instance of the CreateLead class.
  Act: Invoke the equals method, passing null as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that the equals method correctly handles null comparisons and returns false.
  This test ensures that the equals method adheres to the contract of returning false when compared with null.

Scenario 3: Testing equality with an object of a different class

Details:
  TestName: equalsWithDifferentClass()
  Description: This test checks if the equals method returns false when comparing an object with an instance of a different class.
Execution:
  Arrange: Create an instance of the CreateLead class and an instance of a different class (e.g., String).
  Act: Invoke the equals method, passing the instance of the different class as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies objects of different classes as not equal.
  This test ensures that the equals method properly compares the class of the objects before proceeding with further equality checks.

Scenario 4: Testing equality with objects having the same name

Details:
  TestName: equalsWithSameName()
  Description: This test checks if the equals method returns true when comparing two CreateLead objects with the same name value.
Execution:
  Arrange: Create two instances of the CreateLead class with the same name value.
  Act: Invoke the equals method, passing one instance as the argument to compare with the other instance.
  Assert: Use assertTrue to verify that the method returns true.
Validation:
  The assertion verifies that the equals method correctly identifies two CreateLead objects as equal when they have the same name value.
  This test ensures that the equals method properly compares the name field of the CreateLead objects for equality.

Scenario 5: Testing equality with objects having different names

Details:
  TestName: equalsWithDifferentNames()
  Description: This test checks if the equals method returns false when comparing two CreateLead objects with different name values.
Execution:
  Arrange: Create two instances of the CreateLead class with different name values.
  Act: Invoke the equals method, passing one instance as the argument to compare with the other instance.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies two CreateLead objects as not equal when they have different name values.
  This test ensures that the equals method properly compares the name field of the CreateLead objects and returns false if they are different.

Scenario 6: Testing equality with objects having null names

Details:
  TestName: equalsWithNullNames()
  Description: This test checks if the equals method returns true when comparing two CreateLead objects with null name values.
Execution:
  Arrange: Create two instances of the CreateLead class with null name values.
  Act: Invoke the equals method, passing one instance as the argument to compare with the other instance.
  Assert: Use assertTrue to verify that the method returns true.
Validation:
  The assertion verifies that the equals method correctly identifies two CreateLead objects as equal when they both have null name values.
  This test ensures that the equals method properly handles the case where both objects have null names and considers them equal.

Note: The provided test scenarios assume that the CreateLead class has a private field named "name" of type String, as indicated in the provided field information. The scenarios cover various cases such as comparing an object with itself, comparing with null, comparing with objects of different classes, and comparing objects with different name values.
*/

// ********RoostGPT********
package com.baeldung.write.commands;

import static org.junit.Assert.*;
import org.junit.Test;
import javax.validation.constraints.NotNull;
import com.baeldung.infra.command.Command;

public class CreateLeadEqualsTest {

	@Test
	public void equalsWithSameObject() {
		CreateLead createLead = new CreateLead("John");
		assertTrue(createLead.equals(createLead));
	}

	@Test
	public void equalsWithNull() {
		CreateLead createLead = new CreateLead("John");
		assertFalse(createLead.equals(null));
	}

	@Test
	public void equalsWithDifferentClass() {
		CreateLead createLead = new CreateLead("John");
		String otherObject = "John";
		assertFalse(createLead.equals(otherObject));
	}

	@Test
	public void equalsWithSameName() {
		CreateLead createLead1 = new CreateLead("John");
		CreateLead createLead2 = new CreateLead("John");
		assertTrue(createLead1.equals(createLead2));
	}

	@Test
	public void equalsWithDifferentNames() {
		CreateLead createLead1 = new CreateLead("John");
		CreateLead createLead2 = new CreateLead("Jane");
		assertFalse(createLead1.equals(createLead2));
	}

	@Test
	public void equalsWithNullNames() {
		CreateLead createLead1 = new CreateLead(null);
		CreateLead createLead2 = new CreateLead(null);
		assertTrue(createLead1.equals(createLead2));
	}

	@Test
	public void equalsWithNullAndNonNullNames() {
		CreateLead createLead1 = new CreateLead(null);
		CreateLead createLead2 = new CreateLead("John");
		assertFalse(createLead1.equals(createLead2));
	}

	// Add a test case to check equality when both objects have empty string names
	@Test
	public void equalsWithEmptyStringNames() {
		CreateLead createLead1 = new CreateLead("");
		CreateLead createLead2 = new CreateLead("");
		assertTrue(createLead1.equals(createLead2));
	}

	// Add a test case to check equality when one object has an empty string name and the
	// other has a non-empty string name
	@Test
	public void equalsWithEmptyAndNonEmptyStringNames() {
		CreateLead createLead1 = new CreateLead("");
		CreateLead createLead2 = new CreateLead("John");
		assertFalse(createLead1.equals(createLead2));
	}

}
