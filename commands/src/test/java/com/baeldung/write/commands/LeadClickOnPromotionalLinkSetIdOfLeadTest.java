// ********RoostGPT********
/*
Test generated by RoostGPT for test event-source-cqrs-azure using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=setIdOfLead_b4a4f46ab3
ROOST_METHOD_SIG_HASH=setIdOfLead_5031dee72d

"""
Scenario 1: Checking setIdOfLead method with a valid UUID
  Details:
    TestName: setIdOfLeadValidUUID.
    Description: This test is meant to check if the setIdOfLead method sets the passed UUID correctly.
  Execution:
    Arrange: Create a valid UUID instance.
    Act: Invoke setIdOfLead method with the created UUID instance.
    Assert: Use getter to get the idOfLead and assert it with the UUID instance previously created.
  Validation:
    The assertion aims to verify whether the setIdOfLead method sets the idOfLead properly with the UUID instance. If the getter result matches the created UUID instance, then it confirms that the method works as expected.

Scenario 2: Testing setIdOfLead method with a null UUID
  Details:
    TestName: setIdOfLeadNullUUID.
    Description: This test is meant to check if the setIdOfLead method handles the null UUID input without throwing an Exception.
  Execution:
    Arrange: Pass a null as UUID.
    Act: Invoke setIdOfLead method with the null UUID.
    Assert: Use getter to get the idOfLead and assert it with null UUID.
  Validation:
    The assertion aims to verify whether the setIdOfLead method sets the idOfLead as null when passed with null UUID. It checks the robustness of the method in handling null inputs.

Scenario 3: Checking setIdOfLead method with multiple UUID inputs
  Details:
    TestName: setIdOfLeadMultipleUUIDInputs.
    Description: This test is meant to check if the setIdOfLead method updates the idOfLead with the latest UUID instance.
  Execution:
    Arrange: Create multiple UUID instances.
    Act: Invoke setIdOfLead method multiple times with different UUID instances.
    Assert: Use getter to get the idOfLead and assert it with the last UUID instance passed.
  Validation:
    The assertion aims to verify whether the setIdOfLead method updates the idOfLead properly with the latest UUID instance when invoked multiple times. If the getter result matches the last passed UUID instance, then it confirms that the method works as expected by overriding the previous idOfLead.
"""
*/

// ********RoostGPT********
package com.baeldung.write.commands;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import com.baeldung.infra.command.Command;

class LeadClickOnPromotionalLinkSetIdOfLeadTest {

	private LeadClickOnPromotionalLink leadClickOnPromotionalLink;

	@BeforeEach
	void setUp() {
		this.leadClickOnPromotionalLink = new LeadClickOnPromotionalLink();
	}

	@Test
	void setIdOfLeadValidUUID() {
		// Arrange
		UUID uuid = UUID.randomUUID();
		// Act
		leadClickOnPromotionalLink.setIdOfLead(uuid);
		// Assert
		assertEquals(uuid, leadClickOnPromotionalLink.getIdOfLead());
	}

	@Test
	void setIdOfLeadNullUUID() {
		// Act
		leadClickOnPromotionalLink.setIdOfLead(null);
		// Assert
		assertNull(leadClickOnPromotionalLink.getIdOfLead());
	}

	@Test
	void setIdOfLeadMultipleUUIDInputs() {
		// Arrange
		UUID uuid1 = UUID.randomUUID();
		UUID uuid2 = UUID.randomUUID();
		UUID uuid3 = UUID.randomUUID();
		// Act
		leadClickOnPromotionalLink.setIdOfLead(uuid1);
		leadClickOnPromotionalLink.setIdOfLead(uuid2);
		leadClickOnPromotionalLink.setIdOfLead(uuid3);
		// Assert
		assertEquals(uuid3, leadClickOnPromotionalLink.getIdOfLead());
	}

}
