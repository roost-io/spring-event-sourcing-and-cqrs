// ********RoostGPT********
/*
Test generated by RoostGPT for test claude-spring-event-sourcing using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_47e678da77
ROOST_METHOD_SIG_HASH=equals_04d0b28fc6

Here are the JUnit test scenarios for the provided `equals` method:

Scenario 1: Test equality of identical objects

Details:
  TestName: equalsReturnsTrueForIdenticalObjects
  Description: This test verifies that the equals method returns true when comparing an object with itself.
Execution:
  Arrange: Create an instance of LeadClickOnPromotionalLink with a specific idOfLead value.
  Act: Invoke the equals method, passing the same object as the argument.
  Assert: Use assertEquals to verify that the method returns true.
Validation:
  The assertion ensures that the equals method correctly identifies an object as equal to itself.
  This test is important to validate the reflexive property of equality.

Scenario 2: Test equality of objects with the same idOfLead

Details:
  TestName: equalsReturnsTrueForObjectsWithSameIdOfLead
  Description: This test verifies that the equals method returns true when comparing two objects with the same idOfLead value.
Execution:
  Arrange: Create two instances of LeadClickOnPromotionalLink with the same idOfLead value.
  Act: Invoke the equals method on one object, passing the other object as the argument.
  Assert: Use assertEquals to verify that the method returns true.
Validation:
  The assertion ensures that the equals method correctly identifies two objects as equal when they have the same idOfLead value.
  This test validates that the equality comparison is based on the idOfLead field.

Scenario 3: Test inequality of objects with different idOfLead

Details:
  TestName: equalsReturnsFalseForObjectsWithDifferentIdOfLead
  Description: This test verifies that the equals method returns false when comparing two objects with different idOfLead values.
Execution:
  Arrange: Create two instances of LeadClickOnPromotionalLink with different idOfLead values.
  Act: Invoke the equals method on one object, passing the other object as the argument.
  Assert: Use assertEquals to verify that the method returns false.
Validation:
  The assertion ensures that the equals method correctly identifies two objects as unequal when they have different idOfLead values.
  This test validates that the equality comparison distinguishes objects based on their idOfLead field.

Scenario 4: Test inequality of object with null

Details:
  TestName: equalsReturnsFalseForNullObject
  Description: This test verifies that the equals method returns false when comparing an object with null.
Execution:
  Arrange: Create an instance of LeadClickOnPromotionalLink with a specific idOfLead value.
  Act: Invoke the equals method, passing null as the argument.
  Assert: Use assertEquals to verify that the method returns false.
Validation:
  The assertion ensures that the equals method correctly handles the case when the compared object is null.
  This test validates that the method follows the contract of the equals method by returning false for null comparisons.

Scenario 5: Test inequality of objects of different classes

Details:
  TestName: equalsReturnsFalseForObjectsOfDifferentClasses
  Description: This test verifies that the equals method returns false when comparing objects of different classes.
Execution:
  Arrange: Create an instance of LeadClickOnPromotionalLink and an object of a different class (e.g., String).
  Act: Invoke the equals method on the LeadClickOnPromotionalLink object, passing the object of a different class as the argument.
  Assert: Use assertEquals to verify that the method returns false.
Validation:
  The assertion ensures that the equals method correctly identifies objects of different classes as unequal.
  This test validates that the method follows the contract of the equals method by comparing the class of the objects.

Scenario 6: Test equality of objects with null idOfLead

Details:
  TestName: equalsReturnsTrueForObjectsWithNullIdOfLead
  Description: This test verifies that the equals method returns true when comparing two objects with null idOfLead values.
Execution:
  Arrange: Create two instances of LeadClickOnPromotionalLink with null idOfLead values.
  Act: Invoke the equals method on one object, passing the other object as the argument.
  Assert: Use assertEquals to verify that the method returns true.
Validation:
  The assertion ensures that the equals method correctly identifies two objects as equal when they both have null idOfLead values.
  This test validates that the method handles the case when idOfLead is null consistently.

These test scenarios cover various aspects of the `equals` method, including equality of identical objects, objects with the same and different `idOfLead` values, comparison with null, objects of different classes, and objects with null `idOfLead`. They ensure that the method behaves correctly and follows the contract of the `equals` method.
*/

// ********RoostGPT********
package com.baeldung.write.commands;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.UUID;

import org.junit.Before;
import org.junit.Test;

import com.baeldung.infra.command.Command;

public class LeadClickOnPromotionalLinkEqualsTest {

    private LeadClickOnPromotionalLink link1;
    private LeadClickOnPromotionalLink link2;

    @Before
    public void setUp() {
        UUID idOfLead = UUID.randomUUID();
        link1 = new LeadClickOnPromotionalLink();
        link1.setIdOfLead(idOfLead);
        link2 = new LeadClickOnPromotionalLink();
        link2.setIdOfLead(idOfLead);
    }

    @Test
    public void equalsReturnsTrueForIdenticalObjects() {
        assertTrue(link1.equals(link1));
    }

    @Test
    public void equalsReturnsTrueForObjectsWithSameIdOfLead() {
        assertTrue(link1.equals(link2));
    }

    @Test
    public void equalsReturnsFalseForObjectsWithDifferentIdOfLead() {
        link2.setIdOfLead(UUID.randomUUID());
        assertFalse(link1.equals(link2));
    }

    @Test
    public void equalsReturnsFalseForNullObject() {
        assertFalse(link1.equals(null));
    }

    @Test
    public void equalsReturnsFalseForObjectsOfDifferentClasses() {
        assertFalse(link1.equals("string"));
    }

    @Test
    public void equalsReturnsTrueForObjectsWithNullIdOfLead() {
        link1.setIdOfLead(null);
        link2.setIdOfLead(null);
        assertTrue(link1.equals(link2));
    }
}
