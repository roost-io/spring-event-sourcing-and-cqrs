// ********RoostGPT********
/*
Test generated by RoostGPT for test claude-spring-event-sourcing using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_5553f55b84
ROOST_METHOD_SIG_HASH=equals_ed9bc63aed

Here are the JUnit test scenarios for the provided equals method:

Scenario 1: Comparing object to itself

Details:
  TestName: equalsReturnsTrueForSameObject
  Description: This test checks if the equals method returns true when comparing an object to itself.
Execution:
  Arrange: Create an instance of LeadClickOnPromotionalLink.
  Act: Invoke equals method on the instance, passing the same instance as the argument.
  Assert: Use assertTrue to verify that the method returns true.
Validation:
  The assertion verifies that the equals method correctly identifies an object as equal to itself.
  This test ensures the reflexive property of equality, which is a fundamental requirement for the equals method.

Scenario 2: Comparing object to null

Details:
  TestName: equalsReturnsFalseForNull
  Description: This test checks if the equals method returns false when comparing an object to null.
Execution:
  Arrange: Create an instance of LeadClickOnPromotionalLink.
  Act: Invoke equals method on the instance, passing null as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that the equals method correctly handles the case when the compared object is null.
  This test ensures that the equals method adheres to the contract of returning false when comparing to null.

Scenario 3: Comparing object to instance of different class

Details:
  TestName: equalsReturnsFalseForDifferentClass
  Description: This test checks if the equals method returns false when comparing an object to an instance of a different class.
Execution:
  Arrange: Create an instance of LeadClickOnPromotionalLink and an instance of a different class (e.g., Object).
  Act: Invoke equals method on the LeadClickOnPromotionalLink instance, passing the instance of the different class as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies objects of different classes as not equal.
  This test ensures that the equals method properly checks for class equality before proceeding with further comparisons.

Scenario 4: Comparing objects with equal idOfLead values

Details:
  TestName: equalsReturnsTrueForEqualIdOfLead
  Description: This test checks if the equals method returns true when comparing two LeadClickOnPromotionalLink objects with equal idOfLead values.
Execution:
  Arrange: Create two instances of LeadClickOnPromotionalLink with the same idOfLead value.
  Act: Invoke equals method on one instance, passing the other instance as the argument.
  Assert: Use assertTrue to verify that the method returns true.
Validation:
  The assertion verifies that the equals method correctly identifies objects with equal idOfLead values as equal.
  This test ensures that the equals method properly compares the idOfLead field for equality.

Scenario 5: Comparing objects with different idOfLead values

Details:
  TestName: equalsReturnsFalseForDifferentIdOfLead
  Description: This test checks if the equals method returns false when comparing two LeadClickOnPromotionalLink objects with different idOfLead values.
Execution:
  Arrange: Create two instances of LeadClickOnPromotionalLink with different idOfLead values.
  Act: Invoke equals method on one instance, passing the other instance as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies objects with different idOfLead values as not equal.
  This test ensures that the equals method properly distinguishes objects based on the idOfLead field.

Scenario 6: Comparing objects with null and non-null idOfLead values

Details:
  TestName: equalsReturnsFalseForNullAndNonNullIdOfLead
  Description: This test checks if the equals method returns false when comparing two LeadClickOnPromotionalLink objects where one has a null idOfLead and the other has a non-null idOfLead.
Execution:
  Arrange: Create two instances of LeadClickOnPromotionalLink, one with a null idOfLead and the other with a non-null idOfLead.
  Act: Invoke equals method on one instance, passing the other instance as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that the equals method correctly handles the case when one object has a null idOfLead and the other has a non-null idOfLead.
  This test ensures that the equals method properly compares the idOfLead field, considering null values.

These test scenarios cover various cases for the equals method, including comparing an object to itself, null, instances of different classes, and objects with equal and different idOfLead values. They ensure that the equals method behaves correctly according to the equality contract and handles edge cases appropriately.
*/

// ********RoostGPT********
package com.baeldung.write.commands;

import static org.junit.Assert.*;
import java.util.UUID;
import org.junit.Before;
import org.junit.Test;
import com.baeldung.infra.command.Command;

public class LeadClickOnPromotionalLinkEqualsTest {

	private LeadClickOnPromotionalLink command1;

	private LeadClickOnPromotionalLink command2;

	@Before
	public void setUp() {
		command1 = new LeadClickOnPromotionalLink();
		command2 = new LeadClickOnPromotionalLink();
	}

	@Test
	public void equalsReturnsTrueForSameObject() {
		assertTrue(command1.equals(command1));
	}

	@Test
	public void equalsReturnsFalseForNull() {
		assertFalse(command1.equals(null));
	}

	@Test
	public void equalsReturnsFalseForDifferentClass() {
		assertFalse(command1.equals(new Object()));
	}

	@Test
	public void equalsReturnsTrueForEqualIdOfLead() {
		UUID idOfLead = UUID.randomUUID();
		command1.setIdOfLead(idOfLead);
		command2.setIdOfLead(idOfLead);
		assertTrue(command1.equals(command2));
	}

	@Test
	public void equalsReturnsFalseForDifferentIdOfLead() {
		command1.setIdOfLead(UUID.randomUUID());
		command2.setIdOfLead(UUID.randomUUID());
		assertFalse(command1.equals(command2));
	}

	@Test
	public void equalsReturnsFalseForNullAndNonNullIdOfLead() {
		command1.setIdOfLead(null);
		command2.setIdOfLead(UUID.randomUUID());
		assertFalse(command1.equals(command2));
		assertFalse(command2.equals(command1));
	}

	// Add the following test case to cover the scenario where both idOfLead are null
	@Test
	public void equalsReturnsTrueForBothNullIdOfLead() {
		command1.setIdOfLead(null);
		command2.setIdOfLead(null);
		assertTrue(command1.equals(command2));
	}

}
