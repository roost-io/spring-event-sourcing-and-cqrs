// ********RoostGPT********
/*
Test generated by RoostGPT for test claude-spring-event-sourcing using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=hashCode_ca1f3e9c1e
ROOST_METHOD_SIG_HASH=hashCode_24d856d52f

Here are some JUnit test scenarios for the provided hashCode() method:

Scenario 1: Test hashCode when idOfLead is null

Details:
  TestName: hashCodeWhenIdOfLeadIsNull()
  Description: This test checks if the hashCode method returns the expected value when the idOfLead field is null.
Execution:
  Arrange: Create an instance of the class with idOfLead set to null.
  Act: Call the hashCode() method on the instance.
  Assert: Assert that the returned hash code matches the expected value calculated using the formula in the method.
Validation:
  The assertion verifies that the hashCode method handles null idOfLead correctly and returns a consistent hash code.
  This test is important to ensure the integrity of hash-based collections and comparisons when idOfLead is null.

Scenario 2: Test hashCode when idOfLead is not null

Details:
  TestName: hashCodeWhenIdOfLeadIsNotNull()
  Description: This test checks if the hashCode method returns the expected value when the idOfLead field is not null.
Execution:
  Arrange: Create an instance of the class with idOfLead set to a non-null UUID value.
  Act: Call the hashCode() method on the instance.
  Assert: Assert that the returned hash code matches the expected value calculated using the formula in the method.
Validation:
  The assertion verifies that the hashCode method calculates the hash code correctly when idOfLead has a non-null value.
  This test ensures that the hashCode method follows the contract and produces consistent hash codes for non-null idOfLead values.

Scenario 3: Test hashCode for equal objects

Details:
  TestName: hashCodeForEqualObjects()
  Description: This test checks if the hashCode method returns the same hash code for equal objects.
Execution:
  Arrange: Create two instances of the class with the same idOfLead value.
  Act: Call the hashCode() method on both instances.
  Assert: Assert that the returned hash codes are equal.
Validation:
  The assertion verifies that the hashCode method follows the contract of returning the same hash code for equal objects.
  This test is crucial for the proper functioning of hash-based collections and comparisons, ensuring that equal objects have the same hash code.

Scenario 4: Test hashCode for unequal objects

Details:
  TestName: hashCodeForUnequalObjects()
  Description: This test checks if the hashCode method returns different hash codes for unequal objects.
Execution:
  Arrange: Create two instances of the class with different idOfLead values.
  Act: Call the hashCode() method on both instances.
  Assert: Assert that the returned hash codes are not equal.
Validation:
  The assertion verifies that the hashCode method generates different hash codes for unequal objects.
  This test ensures that the hashCode method provides a good distribution of hash codes and minimizes collisions for unequal objects.

These test scenarios cover the key aspects of the hashCode() method, including handling null and non-null idOfLead values, ensuring consistency for equal objects, and generating different hash codes for unequal objects. They help validate the correctness and behavior of the hashCode() method in various scenarios.
*/

// ********RoostGPT********
package com.baeldung.write.commands;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import java.util.UUID;
import com.baeldung.infra.command.Command;

@RunWith(JUnit4.class)
public class LeadClickOnPromotionalLinkHashCodeTest {

	private LeadClickOnPromotionalLink leadClickOnPromotionalLink;

	@Before
	public void setUp() {
		leadClickOnPromotionalLink = new LeadClickOnPromotionalLink();
	}

	@Test
	public void hashCodeWhenIdOfLeadIsNull() {
		// Arrange
		leadClickOnPromotionalLink.idOfLead = null;
		// Act
		int hashCode = leadClickOnPromotionalLink.hashCode();
		// Assert
		Assert.assertEquals(31, hashCode);
	}

	@Test
	public void hashCodeWhenIdOfLeadIsNotNull() {
		// Arrange
		UUID idOfLead = UUID.randomUUID();
		leadClickOnPromotionalLink.idOfLead = idOfLead;
		// Act
		int hashCode = leadClickOnPromotionalLink.hashCode();
		// Assert
		int expectedHashCode = 31 + idOfLead.hashCode();
		Assert.assertEquals(expectedHashCode, hashCode);
	}

	@Test
	public void hashCodeForEqualObjects() {
		// Arrange
		UUID idOfLead = UUID.randomUUID();
		leadClickOnPromotionalLink.idOfLead = idOfLead;
		LeadClickOnPromotionalLink anotherLeadClickOnPromotionalLink = new LeadClickOnPromotionalLink();
		anotherLeadClickOnPromotionalLink.idOfLead = idOfLead;
		// Act
		int hashCode1 = leadClickOnPromotionalLink.hashCode();
		int hashCode2 = anotherLeadClickOnPromotionalLink.hashCode();
		// Assert
		Assert.assertEquals(hashCode1, hashCode2);
	}

	@Test
	public void hashCodeForUnequalObjects() {
		// Arrange
		leadClickOnPromotionalLink.idOfLead = UUID.randomUUID();
		LeadClickOnPromotionalLink anotherLeadClickOnPromotionalLink = new LeadClickOnPromotionalLink();
		anotherLeadClickOnPromotionalLink.idOfLead = UUID.randomUUID();
		// Act
		int hashCode1 = leadClickOnPromotionalLink.hashCode();
		int hashCode2 = anotherLeadClickOnPromotionalLink.hashCode();
		// Assert
		Assert.assertNotEquals(hashCode1, hashCode2);
	}

}
