// ********RoostGPT********
/*
Test generated by RoostGPT for test event-source-cqrs-azure using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=hashCode_d902b37446
ROOST_METHOD_SIG_HASH=hashCode_5a2657087a

"""
  Scenario 1: Test with idOfLead as NULL

  Details:
    TestName: testHashCodeReturnsZeroForNullId
    Description: This test is meant to check the scenario when idOfLead is NULL. The method should return 0 in this case.
  Execution:
    Arrange: No Arrange step is required as the method doesn't take any parameters.
    Act: Invoke the hashCode() method on the object for which idOfLead is NULL.
    Assert: Validate that the returned integer is 0.
  Validation:
    Since idOfLead is NULL, the method should return 0, which confirms the null check functionality in the hashCode method.

  Scenario 2: Test with idOfLead as Non-Null UUID

  Details:
    TestName: testHashCodeReturnsIdHashCodeForNonNullId
    Description: This test is meant to check the scenario when idOfLead is a specific non-null UUID. The method should return the UUID's hashCode in this case.
  Execution:
    Arrange: Create an object having a specific non-null idOfLead.
    Act: Invoke the hashCode() method.
    Assert: Validate that the returned integer is the hashCode of the UUID.
  Validation:
    It confirms that the hashCode method includes the hashCode of the idOfLead when it is non-null.

  Scenario 3: Test with two objects having the same idOfLead

  Details:
    TestName: testHashCodeReturnsIdenticalValuesForIdenticalIds
    Description: This test scenario is meant to check if the hashCode method returns equal values for two objects if their idOfLead is the same.
  Execution:
    Arrange: Create two objects having the same idOfLead.
    Act: Invoke the hashCode() method for both objects separately.
    Assert: Validate that the two returned integers are equal.
  Validation:
    It confirms that the hashCode method takes the idOfLead into account when computing the hash, and thus returns equal values for objects with equal ids.

   Scenario 4: Test with two objects having different idOfLead

  Details:
    TestName: testHashCodeReturnsDifferentValuesForDifferentIds
    Description: This test scenario is meant to check if the hashCode method returns different values for two objects if their idOfLead is different.
  Execution:
    Arrange: Create two objects with different idOfLead.
    Act: Invoke the hashCode() method for both objects separately.
    Assert: Validate that the two returned integers are different.
  Validation:
    It confirms that the hashCode method takes the idOfLead into account when computing the hash, and thus returns different values for objects with different ids.

  """
*/

// ********RoostGPT********
package com.baeldung.write.commands;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import java.util.UUID;
import com.baeldung.infra.command.Command;

public class LeadClickOnPromotionalLinkHashCodeTest {

	@Test
	public void testHashCodeReturnsZeroForNullId() {
		LeadClickOnPromotionalLink promotionalLink = new LeadClickOnPromotionalLink();
		promotionalLink.setIdOfLead(null);
		int expectedHash = 0;
		int actualHash = promotionalLink.hashCode();
		assertEquals(expectedHash, actualHash);
	}

	@Test
	public void testHashCodeReturnsIdHashCodeForNonNullId() {
		LeadClickOnPromotionalLink promotionalLink = new LeadClickOnPromotionalLink();
		UUID idOfLead = UUID.randomUUID();
		promotionalLink.setIdOfLead(idOfLead);
		int expectedHash = idOfLead.hashCode();
		int actualHash = promotionalLink.hashCode();
		assertEquals(expectedHash, actualHash);
	}

	@Test
	public void testHashCodeReturnsIdenticalValuesForIdenticalIds() {
		UUID commonIdOfLead = UUID.randomUUID();
		LeadClickOnPromotionalLink promotionalLink1 = new LeadClickOnPromotionalLink();
		promotionalLink1.setIdOfLead(commonIdOfLead);
		LeadClickOnPromotionalLink promotionalLink2 = new LeadClickOnPromotionalLink();
		promotionalLink2.setIdOfLead(commonIdOfLead);
		assertEquals(promotionalLink1.hashCode(), promotionalLink2.hashCode());
	}

	@Test
	public void testHashCodeReturnsDifferentValuesForDifferentIds() {
		LeadClickOnPromotionalLink promotionalLink1 = new LeadClickOnPromotionalLink();
		promotionalLink1.setIdOfLead(UUID.randomUUID());
		LeadClickOnPromotionalLink promotionalLink2 = new LeadClickOnPromotionalLink();
		promotionalLink2.setIdOfLead(UUID.randomUUID());
		assertNotEquals(promotionalLink1.hashCode(), promotionalLink2.hashCode());
	}

}
