// ********RoostGPT********
/*
Test generated by RoostGPT for test event-source-cqrs-azure using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=hashCode_d902b37446
ROOST_METHOD_SIG_HASH=hashCode_5a2657087a

"""

  Scenario 1: Testing HashCode method when idOfLead is null

  Details:
    TestName: testHashCodeWithNullIdOfLead
    Description: This test case will verify the correct functionality of the hashCode method when the 'idOfLead' is null. The expected output is 1.
  Execution:
    Arrange: Set 'idOfLead' to null.
    Act: Call the hashCode method.
    Assert: Check if the returned value is 1.
  Validation:
    This scenario is testing the hashCode method's default handling of null values. According to the HashCode contract in Java, the result is always 1 when the input is null.

  Scenario 2: Testing HashCode for non-null UUID

  Details:
    TestName: testHashCodeWithNonNullIdOfLead
    Description: This test scenario will verify the hashCode method when 'idOfLead' is not null. The expected output is the hash of the UUID multiplied by the prime number 31 plus 1.
  Execution:
    Arrange: Create a UUID and assign it to 'idOfLead'.
    Act: Call the hashCode method.
    Assert: Check if the returned value matches the hash of UUID*31+1.
  Validation:
    This scenario tests the regular operation of the hashCode method when idOfLead is not null. The result should be consistent due to the deterministic nature of the hashCode calculation.

  Scenario 3: Consistent HashCode for same instances

  Details:
    TestName: testHashCodeConsistency
    Description: This test is meant to check the consistence of the hashCode method. It means, when called more than once on the same object, hashCode method must consistently return the same integer.
  Execution:
    Arrange: Create a UUID and assign it to 'idOfLead'.
    Act: Call the hashCode method twice.
    Assert: Check if the two returned values are equal.
  Validation:
    This test scenario validates the consistency property of hashCode method. In Java, it is required that if a method is invoked twice on the same object, it must consistently return the same hash.

  """
*/

// ********RoostGPT********
package com.baeldung.write.commands;

import java.util.UUID;
import com.baeldung.infra.command.Command;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

class LeadClickOnPromotionalLinkHashCodeTest {

	private LeadClickOnPromotionalLink command;

	@BeforeEach
	void setUp() {
		command = new LeadClickOnPromotionalLink();
	}

	@Test
	void testHashCodeWithNullIdOfLead() {
		command.setIdOfLead(null);
		int expectedHashCode = 1;
		int actualHashCode = command.hashCode();
		assertEquals(expectedHashCode, actualHashCode, "Hash code does not match for null idOfLead");
	}

	@Test
	void testHashCodeWithNonNullIdOfLead() {
		UUID uuid = UUID.randomUUID();
		command.setIdOfLead(uuid);
		int expectedHashCode = 31 + uuid.hashCode();
		int actualHashCode = command.hashCode();
		assertEquals(expectedHashCode, actualHashCode, "Hash code does not match for non-null idOfLead");
	}

	@Test
	void testHashCodeConsistency() {
		UUID uuid = UUID.randomUUID();
		command.setIdOfLead(uuid);
		int hashCode1 = command.hashCode();
		int hashCode2 = command.hashCode();
		assertEquals(hashCode1, hashCode2, "Hash codes are not consistent for the same instance");
	}

}
