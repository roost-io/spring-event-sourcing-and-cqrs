// ********RoostGPT********
/*
Test generated by RoostGPT for test event-source-cqrs-azure using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=leadClickOnPromotionalLink_2d61bbeea5
ROOST_METHOD_SIG_HASH=leadClickOnPromotionalLink_20987882e4

Scenario 1: Valid Lead clicking on a promotional link
  Details:
    TestName: validLeadClickOnPromotionalLink
    Description: This test will verify if the leadClickOnPromotionalLink method is correctly triggered when a valid Lead object clicks on a promotional link.
  Execution:
    Arrange: Create a valid LeadClickOnPromotionalLink object to act as input.
    Act: Call leadClickOnPromotionalLink with the created LeadClickOnPromotionalLink object.
    Assert: Ensure the save method of the eventStore is called with a LeadClickedOnPromotionalLink event that carries the correct correlationId and leadId.
  Validation:
    This asserts that the method leadClickOnPromotionalLink correctly handles a legitimate lead clicking on a promotional link by storing the event. This is crucial for tracking user behavior and engagement.

Scenario 2: Null input to leadClickOnPromotionalLink method
  Details:
    TestName: nullLeadClickOnPromotionalLink
    Description: This test will verify how the leadClickOnPromotionalLink method handles null input.
  Execution:
    Arrange: No setup as the input is null.
    Act: Call leadClickOnPromotionalLink with null.
    Assert: Expect a MethodArgumentNotValidException or a similar constraint-based exception to be thrown. The save method of the eventStore should not be invoked.
  Validation:
    This asserts that the system enforces the validation constraint annotated on the method's argument, ensuring the method only processes valid lead clicks. This prevents the system from persisting untrackable or fictitious events.

Scenario 3: Lead ID absent in the leadClickOnPromotionalLink Command object
  Details:
    TestName: noIdInLeadClickOnPromotionalLinkCommand
    Description: This test verifies how the method reacts when the ID of the Lead in the Command object is not present.
  Execution:
    Arrange: Setup a LeadClickOnPromotionalLink Command object without setting an ID.
    Act: Call leadClickOnPromotionalLink with the Command object.
    Assert: Expect a constraint-based exception to be thrown and the save function of the eventStore shouldn't be invoked.
  Validation:
    This asserts that the method enforces the need for an ID in the command object, ensuring the Lead is identifiable. This validation is important to ensure that tracking is accurate and reliable.

Remember to replace actual Java classes, methods, exceptions, and assertions names based on your Java test framework. For instance, if you utilize Mockito and JUnit 5, you would use methods such as Mockito.when, Mockito.verify, Assertions.fail, Assertions.assertDoesNotThrow and so on. In the case of Spring, the equivalents maybe different.
*/

// ********RoostGPT********
package com.baeldung.write.web;

import com.baeldung.store.events.LeadClickedOnPromotionalLink;
import com.baeldung.store.service.EventStore;
import com.baeldung.write.commands.LeadClickOnPromotionalLink;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.ArgumentMatchers.any;

@SpringBootTest
public class CommandControllerLeadClickOnPromotionalLinkTest {

	@Mock
	EventStore eventStore;

	@InjectMocks
	CommandController commandController = new CommandController();

	@Test
	public void validLeadClickOnPromotionalLink() {
		LeadClickOnPromotionalLink leadClickCommand = new LeadClickOnPromotionalLink(UUID.randomUUID());
		commandController.leadClickOnPromotionalLink(leadClickCommand);
		verify(eventStore, times(1)).save(any(LeadClickedOnPromotionalLink.class));
	}

	@Test
	public void nullLeadClickOnPromotionalLink() {
		assertThrows(MethodArgumentTypeMismatchException.class,
				() -> commandController.leadClickOnPromotionalLink(null));
		verify(eventStore, times(0)).save(any(LeadClickedOnPromotionalLink.class));
	}

	@Test
	public void noIdInLeadClickOnPromotionalLinkCommand() {
		assertThrows(MethodArgumentTypeMismatchException.class,
				() -> commandController.leadClickOnPromotionalLink(new LeadClickOnPromotionalLink()));
		verify(eventStore, times(0)).save(any(LeadClickedOnPromotionalLink.class));
	}

}
