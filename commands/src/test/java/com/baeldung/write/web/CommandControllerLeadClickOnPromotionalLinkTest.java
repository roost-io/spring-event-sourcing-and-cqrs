// ********RoostGPT********
/*
Test generated by RoostGPT for test event-source-cqrs-azure using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=leadClickOnPromotionalLink_2d61bbeea5
ROOST_METHOD_SIG_HASH=leadClickOnPromotionalLink_20987882e4

Scenario 1: Successful saving of a lead click on promotional link event
  - TestName: saveSuccessfulLeadClickOnPromotionalLinkEvent
  - Description: This test ensures that a lead click on a promotional link event is successfully saved 
  - Execution:
    - Arrange: Mock the dependencies, and create an instance of LeadClickOnPromotionalLink, inputting a valid idOfLead.
    - Act: Invoke leadClickOnPromotionalLink with the created instance of LeadClickOnPromotionalLink. 
    - Assert: Verify that eventStore.save() method was called correctly by checking its interaction with the mock.
  - Validation: Check that the eventStore.save() method is called with correct arguments. This test checks the proper communication with the eventStore.

Scenario 2: Validate integrity of idOfLead
  - TestName: verifyIntegrityOfIdOfLead
  - Description: This test checks if an exception is thrown when the passed 'idOfLead' attribute is null.   
  - Execution:
    - Arrange: Create an instance of LeadClickOnPromotionalLink with a null 'idOfLead'.
    - Act: Execute leadClickOnPromotionalLink with the created instance of LeadClickOnPromotionalLink. 
    - Assert: Use JUnit assertions to expect an exception thrown by the method due to null 'idOfLead'.
  - Validation: Confirm that the method throws an exception in case 'idOfLead' attribute is null. This test confirms robust error handling for invalid parameters.

Scenario 3: Consistency of correlationId
  - TestName: ensureConsistencyOfCorrelationId
  - Description: This test checks that a unique correlationId is generated and set correctly on the event about a lead click on a promotional link before it is saved..
  - Execution:
    - Arrange: Mock the dependencies, and create an instance of LeadClickOnPromotionalLink with a valid 'idOfLead'.
    - Act: Invoke leadClickOnPromotionalLink with the created instance of LeadClickOnPromotionalLink. 
    - Assert: Confirm that the event.getCorrelationId() returns a valid UUID, and eventStore.save() method was called correctly by checking its interaction with the mock.
  - Validation: Check that a UUID is generated and set as correlationId in the event before it is passed to eventStore.save() method. This test ensures proper generation of correlationId. 

Scenario 4: Validity of instances used by the method
  - TestName: ensureValidityOfUsedInstances
  - Description: This test verifies that instances used in the method have expected values.
  - Execution:
    - Arrange: Create an instance of LeadClickOnPromotionalLink with idOfLead and mock the dependencies.
    - Act: Invoke leadClickOnPromotionalLink method with the created instance of LeadClickOnPromotionalLink.
    - Assert: Validate that the instance of LeadClickedOnPromotionalLink with the passed idOfLead is correctly created and saved.
  - Validation: This test checks the correct instantiation of LeadClickedOnPromotionalLink and calls to eventStore saving the event.
  
Note: Be aware of limits in the execution environment that might restrict possible test scenarios. Furthermore, to balance the testing efforts, one should prioritize tests based on their likelihood and impact.
*/

// ********RoostGPT********
@Test
public void saveSuccessfulLeadClickOnPromotionalLinkEvent() {
    LeadClickOnPromotionalLink command = new LeadClickOnPromotionalLink(UUID.randomUUID());
    controller.leadClickOnPromotionalLink(command);
    verify(eventStore).save(any(LeadClickedOnPromotionalLink.class)); 
}
