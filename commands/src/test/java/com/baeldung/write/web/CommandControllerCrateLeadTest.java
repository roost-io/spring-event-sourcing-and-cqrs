// ********RoostGPT********
/*
Test generated by RoostGPT for test event-source-cqrs-azure using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=crateLead_f947f358b5
ROOST_METHOD_SIG_HASH=crateLead_278ecd7296

"""
Scenario 1: Validate if the crateLead method successfully generates and saves an event when the user generates a correct lead.
Details:
   TestName: testCrateLeadCreatesGeneratedValue
   Description: This test aims to verify whether crateLead method generates a LeadCreated event and saves it in the event store when a correct lead is provided.
Execution:
   Arrange: Instantiate a CreateLead object with a valid name.
   Act: Call the crateLead method with the CreateLead object.
   Assert: Determine if eventStore has saved an instance of LeadCreated.
Validation:
   The assertion verifies that a LeadCreated event was generated and saved in the event store. This is significant as this is the core functionality of the crateLead method.

Scenario 2: Testing when crateLead method gets null as the method parameter.
Details:
   TestName: testCrateLeadNullParameter
   Description: The purpose of this test is to check if the crateLead method throws NullPointerException when null parameter is passed.
Execution:
   Arrange: Set the CreateLead object to null.
   Act: Call the crateLead method with null parameter.
   Assert: Expect a NullPointerException to be thrown.
Validation:
   The assertion checks if the method handles null inputs correctly. Such inputs can often lead to application crashes, hence it is crucial to handle them properly.

Scenario 3: Testing when invalid createLeadCommand is passed to the crateLead method.
Details:
   TestName: testCrateLeadInvalidParameter
   Description: The purpose is to test if the crateLead method throws a validation error when a CreateLead object without a name (or invalid name) is passed.
Execution:
   Arrange: Instantiate a CreateLead object with no name or invalid name.
   Act: Call the crateLead method with this CreateLead object.
   Assert: Expect a validation exception to be thrown.
Validation:
   The assertion validates whether a validation error is correctly thrown when the createLeadCommand doesn't have a valid name. This verifies if application correctly validates against invalid inputs.
"""

*/

// ********RoostGPT********
@SpringBootTest
public class CommandControllerCreateLeadTest {

	@MockBean
	private EventStore eventStore;

	private CommandController testSubject;

	@BeforeEach
	void setup() {
		testSubject = new CommandController(eventStore);
	}

	@Test
	void testCrateLeadCreatesGeneratedValue() {
		CreateLead createLeadCommand = new CreateLead("Valid Name");
		Mockito.doNothing().when(this.eventStore).save(any(LeadCreated.class));
		testSubject.crateLead(createLeadCommand);
		Mockito.verify(this.eventStore, times(1)).save(any(LeadCreated.class));
	}

	@Test
	void testCrateLeadNullParameter() {
		assertThrows(NullPointerException.class, () -> {
			testSubject.crateLead(null);
		});
	}

	@Test
	void testCrateLeadInvalidParameter() {
		CreateLead createLeadCommand = new CreateLead(""); // invalid name
		assertThrows(IllegalArgumentException.class, () -> {
			testSubject.crateLead(createLeadCommand);
		});
	}

}
