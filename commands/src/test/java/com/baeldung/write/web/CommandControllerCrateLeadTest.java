// ********RoostGPT********
/*
Test generated by RoostGPT for test event-source-cqrs-azure using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=crateLead_f947f358b5
ROOST_METHOD_SIG_HASH=crateLead_278ecd7296

Scenario 1: Create Lead with valid input

Details:    
  TestName: testCreateLeadWithValidInput  
  Description: This test scenario covers the basic functionality of creating a lead using valid input.   
Execution:  
  Arrange: Mock the `CreateLead` and `eventStore` objects. Prepare valid `createLeadCommand` data.  
  Act: Invoke `crateLead` method with the `createLeadCommand` parameter.
  Assert: Verify if the `eventStore.save` method was invoked.    
Validation:
  The main aim of this assertion is to check whether the `eventStore.save` method is invoked with proper parameters. The expected outcome would be a successful save operation on `eventStore`. 

Scenario 2: Create Lead with null input

Details:
  TestName: testCreateLeadWithNullInput
  Description: This test scenario aims to check the behavior of the `crateLead` method when provided with null input.
Execution:
  Arrange: Mock the `CreateLead` and `eventStore` objects. Provide null for `createLeadCommand` data.
  Act: Invoke `crateLead` method with `null` `createLeadCommand` parameter.
  Assert: Assert that an expected `InvalidArgument` exception is thrown.
Validation:
  The objective is to verify that the program can handle null input and throws an appropriate exception. It ensures that the program can guard against null input errors.

Scenario 3: Create Lead with invalid input

Details: 
  TestName: testCreateLeadWithInvalidInput
  Description: This test scenario is designed to ensure that the application correctly handles invalid `createLeadCommand` input.
Execution: 
  Arrange: Mock the `CreateLead` and `eventStore` objects. Provide invalid `createLeadCommand` data.
  Act: Invoke `crateLead` method with the invalid `createLeadCommand` parameter.
  Assert: Assert that an expected `ValidationError` exception is thrown.
Validation:
  This assertion aims to verify that the application is safeguarded against invalid input and throws an appropriate error.

Scenario 4: Test EventStore save operation failure

Details: 
  TestName: testEventStoreSaveFailure
  Description: This test scenario is aimed at ensuring that the `crateLead` method can handle failures in the `eventStore.save` operation gracefully.
Execution: 
  Arrange: Mock the `CreateLead` and `eventStore` objects. Set up the `eventStore.save` to throw an exception.
  Act: Invoke `crateLead` method.
  Assert: Assert that the expected exception is thrown when the `eventStore.save` operation fails.
Validation: 
  The assertion aims to ensure that the application can handle `eventStore.save` operation failures correctly, by throwing an appropriate exception.
*/

// ********RoostGPT********
@Test
void testCreateLeadWithValidInput() {
   commandController.crateLead(createLeadCommand);
   verify(eventStore, times(1)).save(any(LeadCreated.class));
}
